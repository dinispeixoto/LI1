module Main where

import Data.Char

type Tabuleiro = [String]
type Posicao = String

main = do input <- getContents
          if (checkCMD input == []) then putStrLn "ERRO"
          else putStrLn (checkCMD input)

checkCMD :: String -> Posicao
checkCMD file | (cmd == 'A') = avancar tab pos
              | (cmd == 'S') = saltar tab pos
              | (cmd == 'E') = esq pos
              | (cmd == 'D') = dir pos
              | (cmd == 'L') = lampada tab pos
                where 
                      l = lines file
                      tab = take (length l-2) l
                      pos = l !! (length l-2)
                      cmd = head (last l)

esq :: Posicao -> Posicao                                             -- Comando: Esquerda
esq pos | (ori == "N") = unwords (coords ++ ["O"])
        | (ori == "O") = unwords (coords ++ ["S"])
        | (ori == "S") = unwords (coords ++ ["E"])
        | (ori == "E") = unwords (coords ++ ["N"])
           where posL = words pos
                 ori = posL !! 2
                 coords = [(posL !! 0),(posL !! 1)]

dir :: Posicao -> Posicao                                             -- Comando: Direita
dir pos | (ori == "N") = unwords (coords ++ ["E"])
        | (ori == "E") = unwords (coords ++ ["S"])
        | (ori == "S") = unwords (coords ++ ["O"])
        | (ori == "O") = unwords (coords ++ ["N"])
          where posL = words pos
                ori = posL !! 2
                coords = [(posL !! 0),(posL !! 1)]

avancar :: Tabuleiro -> Posicao -> Posicao                                  -- Comando: Avançar
avancar tab pos | (nivelIni == toLower (proxNivel)) || (nivelIni == toUpper (proxNivel)) = unwords nPos
                | otherwise = []
                  where (proxNivel, x, y, ori) = getNext tab pos
                        nivelIni = getPos tab pos
                        nPos = [(show x),(show y),ori]

saltar :: Tabuleiro -> Posicao -> Posicao
saltar tab pos | (proxLevel == toLower pLevel) || (proxLevel == toUpper (pLevel)) = unwords nPos
               | (proxLevel == toLower nLevel) || (proxLevel == toUpper (nLevel)) = unwords nPos
               | otherwise = []
                 where (proxLevel, x, y, ori) = getNext tab pos
                       nPos = [(show x),(show y),ori]
                       level = getPos tab pos
                       pLevel = chr (ord level - 1)
                       nLevel = chr (ord level + 1)

lampada :: Tabuleiro -> Posicao -> String                           -- Comando: Lâmpada 
lampada tab pos | (posLa >= 'A') && (posLa <= 'Z') = pos 
                 | otherwise = []
                  where posLa = getPos tab pos

getPos :: Tabuleiro -> Posicao -> Char
getPos tab pos = ((nMap !! y) !! x)
                     where nMap = reverse tab	
                           posL = words pos
                           x = (read (posL !! 0) :: Int)
                           y = (read (posL !! 1) :: Int)

getNext :: Tabuleiro -> Posicao -> (Char, Int,Int, String)
getNext tab pos | (ori == "N") && (y+1 < n)  = ((nMap !! ((y+1)) !! x), x, y+1, "N")
                | (ori == "S") && (y-1 >= 0) = ((nMap !! ((y-1)) !! x), x, y-1, "S")
                | (ori == "O") && (x-1 >= 0)  = ((nMap !! y) !! (x-1), x-1, y, "O")
                | (ori == "E") && (x+1 < m) = ((nMap !! y) !! (x+1), x+1, y, "E")
                | otherwise = ('!', -1, -1, [])
                   where nMap = reverse tab
                         posL = words pos
                         x = (read (posL !! 0) :: Int)
                         y = (read (posL !! 1) :: Int)
                         ori = posL !! 2
                         n = length tab
                         m = length (head (tab))