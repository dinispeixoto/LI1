module Main where

type Tab = [String]
type Pos = String

teste :: String -> IO()
teste f = do t <- readFile f
             let l = lines t
                 mapa = take (length l-2) l
                 n = length mapa
                 m = length (head (mapa))
                 pos_ini = head (take 1 (drop (length l-2) l))
                 solution = last l
             print (avancar mapa pos_ini)
             print (lampada mapa pos)

esq :: Pos -> Pos                                             -- Comando: Esquerda
esq pos | (ori == "N") = unwords (coords ++ ["O"])
        | (ori == "E") = unwords (coords ++ ["S"])
        | (ori == "S") = unwords (coords ++ ["E"])
        | (ori == "O") = unwords (coords ++ ["N"])
           where posL = words pos
                 ori = posL !! 2
                 coords = [(posL !! 0),(posL !! 1)]

dir :: Pos -> Pos                                             -- Comando: Direita
dir pos | (ori == "N") = unwords (coords ++ ["E"])
        | (ori == "O") = unwords (coords ++ ["S"])
        | (ori == "S") = unwords (coords ++ ["O"])
        | (ori == "E") = unwords (coords ++ ["N"])
          where posL = words pos
                ori = posL !! 2
                coords = [(posL !! 0),(posL !! 1)]

avancar :: Tab -> Pos -> Pos                                  -- Comando: Avançar
avancar tab pos | (getPos tab pos) == level = unwords nPos
                | (getPos tab pos) /= level = " "
                  where (level, x, y, ori) = getNext tab pos
                        nPos = [(show x),(show y),ori]

getPos :: Tab -> Pos -> Char
getPos mapa pos = ((nMap !! y) !! x)
                     where nMap = reverse mapa	
                           posL = words pos
                           x = (read (posL !! 0) :: Int)
                           y = (read (posL !! 1) :: Int)

getNext :: Tab -> Pos -> (Char, Int,Int, String)
getNext mapa pos | (ori == "N") && (y+1 < n)  = ((nMap !! ((y+1)) !! x), x, y+1, "N")
                 | (ori == "S") && (y-1 >= 0) = ((nMap !! ((y-1)) !! x), x, y-1, "S")
                 | (ori == "O") && (x+1 < m)  = ((nMap !! y) !! (x+1), x+1, y, "O")
                 | (ori == "E") && (x-1 >= 0) = ((nMap !! y) !! (x-1), x-1, y, "E")
                 | otherwise = (' ', -1, -1, []])
                       where nMap = reverse mapa
                             posL = words pos
                             x = (read (posL !! 0) :: Int)
                             y = (read (posL !! 1) :: Int)
                             ori = posL !! 2
                             n = length mapa
                             m = length (head (mapa))

lampada :: Tab -> Pos -> String                           -- Comando: Lâmpada 
lampada mapa pos | (posLa >= 'A' && posLa <= 'Z') = pos 
                 | otherwise = []
                  where posLa = getPos mapa pos 

saltar :: Tab -> Pos -> Pos                               -- Comando: Saltar
saltar tab pos | (level == plevel) = unwords nPos 
               | (level == nlevel) = unwords nPos 
               | otherwise = [] 
                  where (level, x, y, ori) = getNext tab pos
                        nPos = [(show x),(show y),ori] 
                        level = getPos tab pos 
                        pLevel = chr (ord level - 1) 
                        nLevel = chr (ord level + 1)