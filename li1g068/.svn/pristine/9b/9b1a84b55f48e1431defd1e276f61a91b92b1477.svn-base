module Main where

import Data.Char

type Tabuleiro = [String]
type Posicao = String
type Nivel = Char

main = do file <- getContents
          if (checkCMD file == []) then putStrLn "ERRO"
          else putStrLn (checkCMD file)


checkCMD :: String -> Posicao
checkCMD file | (cmd == 'A') = avancar tab pos
              | (cmd == 'S') = saltar tab pos
              | (cmd == 'E') = esq pos
              | (cmd == 'D') = dir pos
              | (cmd == 'L') = luz tab pos
                 where 
                      input = lines file
                      tab = take (length input-2) input
                      pos = input !! (length input-2)
                      cmd = head (last input)


esq :: Posicao -> Posicao                                             -- Comando: Esquerda
esq pos | (ori == "N") = unwords (coords ++ ["O"])
        | (ori == "O") = unwords (coords ++ ["S"])
        | (ori == "S") = unwords (coords ++ ["E"])
        | (ori == "E") = unwords (coords ++ ["N"])
           where posW = words pos
                 ori = posW !! 2
                 coords = [(posW !! 0),(posW !! 1)]


dir :: Posicao -> Posicao                                             -- Comando: Direita
dir pos | (ori == "N") = unwords (coords ++ ["E"])
        | (ori == "E") = unwords (coords ++ ["S"])
        | (ori == "S") = unwords (coords ++ ["O"])
        | (ori == "O") = unwords (coords ++ ["N"])
          where posW = words pos
                ori = posW !! 2
                coords = [(posW !! 0),(posW !! 1)]


avancar :: Tabuleiro -> Posicao -> Posicao                                  -- Comando: Avançar
avancar tab pos | (nivel == proxNivel) = unwords newPos
                | otherwise            = []
                  
                where nivel = toLower (getPos tab pos)
                      (proxNivel, x, y, ori) = getNext tab pos
                      newPos = [(show x),(show y),ori]


saltar :: Tabuleiro -> Posicao -> Posicao
saltar tab pos | (proxNivel < nivel) && (proxNivel >= 'a') = newPos 
               | (proxNivel == nivelUp) = newPos
               | otherwise = []
               
               where (proxNivel, x, y, ori) = getNext tab pos
                     nivel = toLower (getPos tab pos)
                     nivelUp = chr (ord nivel + 1)
                     newPos = unwords [(show x),(show y),ori]


luz :: Tabuleiro -> Posicao -> String                           -- Comando: Lâmpada
luz tab pos | isUpper posNivel = pos 
            | otherwise = []
            where posNivel = getPos tab pos

getPos :: Tabuleiro -> Posicao -> Nivel
getPos tab pos = rTab !! y !! x
              
                 where rTab = reverse tab	
                       posW = words pos
                       x = read (posW !! 0) :: Int
                       y = read (posW !! 1) :: Int

getNext :: Tabuleiro -> Posicao -> (Nivel, Int,Int, String)
getNext tab pos | (ori == "N") && (y+1 < n)   = (toLower(rMap !! (y+1) !! x), x, y+1, "N")
                | (ori == "S") && (y-1 >= 0)  = (toLower(rMap !! (y-1) !! x), x, y-1, "S")
                | (ori == "O") && (x-1 >= 0)  = (toLower(rMap !! y !! (x-1)), x-1, y, "O")
                | (ori == "E") && (x+1 < m)   = (toLower(rMap !! y !! (x+1)), x+1, y, "E")
                | otherwise = (' ', -1, -1, []) 
                
                where rMap = reverse tab
                      posW = words pos
                      x = read (posW !! 0) :: Int
                      y = read (posW !! 1) :: Int
                      ori = posW !! 2
                      n = length tab
                      m = length (head (tab))